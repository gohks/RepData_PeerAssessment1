}
}
lmtest(df,4)
lmtest <- function(x, target){
for(i in 1:ncol(x))
{
print(i)
}
}
lmtest(df,4)
df[,2]
df[,1]
df[,5]
sapply(df,class)
lm(df[,3] ~ df[,5])
attach()
attach
lm(df[,3] ~ df[,5])
lm(df[,3] ~ df[,1])
lm(factor(df$Interest.Rate) ~ df$Amount.Requested)
lm(df$Amount.Requested ~ factor(df$Interest.Rate))
sapply(df,class)
lm1 <- lm(df$Interest.Rate ~ df$Amount.Request)
summary(lm1)
new <- gsub("%", "", df$Interest.Rate)
new
as.numeric(new)
interest <- gsub("%","",df$Interest.Rate)
class(interest)
as.numeric(interst)
as.numeric(interest)
df$interst <- interest
dim(df)
interest <- gsub("%","",df$Interest.Rate)
df$interest <- as.numeric(interest)
lm(df$interest, df$Amount.Loan)
lm(df$interest ~ df$Amount.Loan)
lm(df$interest ~ df$Loan.Amount)
names(df)
lm(df$interest ~ df$Amount.Requested)
lm1 <- lm(df$interest ~ df$Amount.Requested)
lm1
plot(df$Amount.Requested, df$Interest.Rate,pch=19)
plot(df$Amount.Requested, df$interest,pch=19)
par(mfrow=c(2,2))
plot(df$Amount.Requested, df$Interest.Rate,pch=19)
plot(df$Monthly.Income, df$Interest.Rate,pch=19)
plot(df$Amount.Requested, df$interest,pch=19)
sapply(df,class)
head(df)
par(mfrow=c(3,2))
plot(df$Amount.Requested, df$interst,pch=19)
plot(df$Monthly.Income, df$interest,pch=19)
plot(df$loanlength, df$interest,pch=19)
plot(df$debtratio, df$interest,pch=19)
plot(df$Open.CREDIT.Lines, df$interest,pch=19)
plot(df$Revolving.CREDIT.Balance, df$interest,pch=19)
interest <- gsub("%","",df$Interest.Rate)
df$interest <- as.numeric(interest)
debtratio <- gsub("%","",df$Debt.To.Income.Ratio)
df$debtratio <- as.numberic(debtratio)
loanlength <- gsub(" months","",df$Loan.Length)
df$loanlenght <- as.numeric(loanlength)
# exploratory plots
par(mfrow=c(3,2))
plot(df$Amount.Requested, df$interst,pch=19)
plot(df$Monthly.Income, df$interest,pch=19)
plot(df$loanlength, df$interest,pch=19)
plot(df$debtratio, df$interest,pch=19)
plot(df$Open.CREDIT.Lines, df$interest,pch=19)
plot(df$Revolving.CREDIT.Balance, df$interest,pch=19)
#convert interest rate to numeric and add to dataframe
interest <- gsub("%","",df$Interest.Rate)
df$interest <- as.numeric(interest)
debtratio <- gsub("%","",df$Debt.To.Income.Ratio)
df$debtratio <- as.numberic(debtratio)
loanlength <- gsub(" months","",df$Loan.Length)
df$loanlength <- as.numeric(loanlength)
# exploratory plots
par(mfrow=c(3,2))
plot(df$Amount.Requested, df$interst,pch=19)
plot(df$Monthly.Income, df$interest,pch=19)
plot(df$loanlength, df$interest,pch=19)
plot(df$debtratio, df$interest,pch=19)
plot(df$Open.CREDIT.Lines, df$interest,pch=19)
plot(df$Revolving.CREDIT.Balance, df$interest,pch=19)
dim(df)
names(df)
df <- subset(df,select=c(1:16,18)
)
names(df)
df <- subset(df,select=c(1:14,16,17))
names(df)
q()
local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
library(ElemStatLearn)
library
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
data(zip.train)
library(ElemStatLearn)
data(zip.train)
str(zip.train)
head(zip.train)
im = zip2image(zip.train,3)
image(im)
im8 = zip2image(zip.train,8)
im12 = zip2image(zip.train,12)
im18 = zip2image(zip.train,18)
image(8)
image(im8)
image(im18)
svd8 <- svd(im8)
svd18 <- svd(im18)
names(svd8)
svd$v
head(svd8)
plot)svd8^2.sum(svd8$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd8^2.sum(svd8$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd8^2/sum(svd8$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd8$d^2/sum(svd8$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd18$d^2/sum(svd18$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd18$d^2/sum(svd18$d^2),ylab="Percent of variance explaned",pch=19)
im8 = zip2image(zip.train,8)
im18 = zip2image(zip.train,18)
image(im8)
image(im18)
svd8 <- svd(im8)
svd18 <- svd(im18)
par(mfrow=c(1,2))
plot(svd8$d^2/sum(svd8$d^2),ylab="Percent of variance explaned",pch=19)
plot(svd18$d^2/sum(svd18$d^2),ylab="Percent of variance explaned",pch=19)
image(im18)
q()
install.packages("RCurl")
data(warpbreaks)
warpbreaks
names(warpbreaks)
ao <- aov(warpbreaks$breaks ~ warpbreaks$wool + warpbreaks$tension)
ao
summary(ao)
log(0.25)
library(glm2)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(glm2)
library(glm)
utils:::menuInstallPkgs()
library(glm2)
data(crabs)
crabs
names(crabs)
glm1 <- glm(crabs$Satellites ~ crabs$Width, family="poisson")
glm1
head(crabs)
glm1
summary(glm1)
names(glm1)
glm1$coefficients
glm1$coefficients[2]
exp(glm1$coefficients[2])
summary(ao)
summary(glm1)
exp(glm1$coefficients) * exp(glm1$coefficients * 22)
exp(glm1$coefficients[1]) * exp(glm1$coefficients[2] * 22)
crabs
crabs[crabs$Width=22, ]
crabs[crabs$Width==22, ]
crabs[crabs$Width<=22, ]
crabs[crabs$Width<=23, ]
data(quine)
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
data(quine)
quine
load.package(MASS)
loadpackage(MASS)
package(MASS)
load(MASS)
lm1 = lm
lm1 = lm(log(Days + 2.5) ~., data=quine)
lm1
aic <- step(lm1)
aic
q()
## This is a markdown file
?Devices
q()
```
dailyTotal <- tapply(data$steps,data$date,FUN=sum,na.rm=T)
## What is mean total number of steps taken per day?
```{r}
dailyTotal <- tapply(data$steps,data$date,FUN=sum,na.rm=T)
```
## Load required libraries
```{r}
library(ggplot2)
```
## Loading and preprocessing the data
```{r}
filename <- "activity.zip"
unzip(zipfile=filename)
data <- read.csv("activity.csv")
```
## What is mean total number of steps taken per day?
```{r}
dailyTotal <- tapply(data$steps,data$date,FUN=sum,na.rm=T)
```
```{r}
filename <- "activity.zip"
unzip(zipfile=filename)
data <- read.csv("activity.csv")
head(data)
```
## Load required libraries
```{r}
library(ggplot2)
```
## Loading and preprocessing the data
```{r}
filename <- "activity.zip"
unzip(zipfile=filename)
data <- read.csv("activity.csv")
head(data)
```
dailyTotal <- tapply(data$steps,data$date,FUN=sum,na.rm=T)
## What is mean total number of steps taken per day?
```{r}
dailyTotal <- tapply(data$steps,data$date,FUN=sum,na.rm=TRUE)
```
dailyTotal <- tapply(data$steps,data$date,FUN=sum,na.rm=TRUE)
library(ggplot2)
filename <- "activity.zip"
unzip(zipfile=filename)
data <- read.csv("activity.csv")
head(data)
library(ggplot2)
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
getwd()
setwd("~/GitHub/RepData_PeerAssessment1")
library(ggplot2)
setwd("~/GitHub/RepData_PeerAssessment1")
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
head(data)
dailyTotal <- tapply(data$steps,data$date,FUN=sum,na.rm=TRUE)
plot(dailyTotal)
qplot(dailyTotal)
hist(dailyTotal)
head(dailyTotal)
length(dailyTotal)
qplot(dailyTotal)
qplot(dailyTotal, binwidth=1000)
class(dailyTotal)
tapply(data$steps,data$date,FUN=mean,na.rm=TRUE)
tapply(data$steps,data$date,FUN=median,na.rm=TRUE)
mean(dailyTotal)
median(dailyTotal)
dailyTotal
nrow(dailyTotal)
ncol(dailyTotal)
ncols(dailyTotal)
ncol(dailyTotal)
colnames(dailyTotal)
qplot(dailyTotal,binwidth=61)
qplot(dailyTotal,binwidth=1000)
dailyTotal
class(dailyTotal)
table(dailyTotal)
temp <- as.matrix(dailyTotal)
temp
head(temp)
colnames(temp)
colnames(temp) <- c("Day","Steps")
ncols(temp)
ncol(temp)
temp1<- data.frame(temp)
temp1
ncol(temp1)
head(temp1)
head(temp)
hist(temp)
rownames(temp)
temp1<- data.frame(rownames(temp),temp)
temp1
hist(temp1)
head(temp1)
hist(temp1$temp)
hist(temp1$temp,binwidth=61)
qplot(temp1$temp,binwidth=61)
hist(temp1)
hist(temp)
hist(dailyTotal,xlab="Total Steps taken each day")
averageSteps <- aggregate(x=list(steps=data$steps),by=list(interval=data$interval),FUN=mean,na.rm=T)
averageSteps <- aggregate(x=list(steps=data$steps),by=list(interval=data$interval), FUN=mean,na.rm=T)
ggplot(data=averageSteps,aes(x=interval,y=steps))
+geom_line()
+xlab("5-minute interval")
+ylab("Average number of steps")
ggplot(data=averageSteps,aes(x=interval,y=steps))+geom_line()
averageSteps <- aggregate(x=list(steps=data$steps),by=list(interval=data$interval), FUN=mean,na.rm=T)
ggplot(data=averageSteps,aes(x=interval,y=steps))+
geom_line()+
xlab("5-minute interval")+
ylab("Average number of steps")
averageSteps
ggplot(data=averageSteps,aes(x=interval,y=steps))+
geom_line()+
xlab("5-minute interval")+
ylab("Average number of steps")+
ggtitle("Plant growth")
Calculate number of missing values in dataset
```{r}
incomplete <- data[!complete.cases(data),]
nrow(incomplete)
```
There are `r nrow(incomplete)` rows with missing values
incomplete <- data[!complete.cases(data),]
nrow(incomplete)
nrow(data)
dailyTotal
averageSteps
mean(dailyTotal)
source('~/.active-rstudio-document', echo=TRUE)
mean(dailyTotal)
round(mean(dailyTotal),2)
source('~/.active-rstudio-document', echo=TRUE)
max_steps <- which.max(averageSteps$steps)
max_Steps
max_steps
averageSteps[max_steps,]
averageSteps[max_steps,interval]
averageSteps[max_steps,]$interval
imputeValue <- function(steps,interval) {
out <- NA
if(!is.na(steps))
out <- c(steps)
else
out <- c(averageSteps[averageSteps$interval==interval,"steps"])
return(out)
}
data2 <- data
data2$steps <- mapply(imputeValue,data2$steps,data2$interval)
data2
summary(data2)
str(data2)
head(data2,20)
head(data2,50)
data2$date
data2$date <- as.Date(data2$date,"%Y-%m-%d")
data2$daytype <- weekdays(data2$date)
head(data2)
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] == "Saturday" || data2$day[i] == "Sunday")
data2$dayType <- "weekend"
else
data2$dayType <- "weekday"
}
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] == "Saturday" || data2$day[i] == "Sunday")
{data2$dayType <- "weekend"}
else
{data2$dayType <- "weekday"}
}
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] == "Saturday" || data2$day[i] == "Sunday"){
data2$dayType <- "weekend"}
else{
data2$dayType <- "weekday"}
}
data2$date <- as.Date(data2$date,"%Y-%m-%d")
data2$day <- weekdays(data2$date)
data2$dayType <- c("Unknown")
if(data2$day[i] == "Saturday" || data2$day[i] == "Sunday"){
for(i in 1:nrow(data2)){
data2$dayType <- "weekend"}
else{
data2$dayType <- "weekday"}
}
1. Create a new factor varialbes in the dataset with two levels - "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
a. Convert date in dataframe to Date type.
```{r}
data2$date <- as.Date(data2$date,"%Y-%m-%d")
```
b. Use weekdays function to determine day of the week for each date
```{r}
data2$day <- weekdays(data2$date)
```
c. Determine if day is weekday or weekend, add this to dayType column in dataframe
```{r}
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] == "Saturday" || data2$day[i] == "Sunday"){
data2$dayType <- "weekend"}
else{
data2$dayType <- "weekday"}
}
```
source('~/.active-rstudio-document', echo=TRUE)
head(data2)
head(data2,20)
head(data2,50)
tail(data2,50)
data2[10:30,]
data2[100:150,]
data2[1000:1150,]
data2[1500:1650,]
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] in c("Saturday","Sunday"){
data2$dayType <- "weekend"
}
else{
data2$dayType <- "weekday"
}
}
data2[1500:1650,]
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] %in% c("Saturday","Sunday"){
data2$dayType <- "weekend"
}
else{
data2$dayType <- "weekday"
}
}
data2[1500:1650,]
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] %in% c("Saturday","Sunday"){
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] %in% c("Saturday","Sunday")){
data2$dayType <- "weekend"
}
else{
data2$dayType <- "weekday"
}
}
data2[1500:1650,]
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] %in% c("Saturday","Sunday")){
data2$dayType <- "weekend"
}
else{
data2$dayType <- "weekday"
}
}
data2[1500:1650,]
data2$dayType <- c("Unknown")
data2 <- data
data2$steps <- mapply(imputeValue,data2$steps,data2$interval)
newDailyTotal <- tapply(data2$steps,data2$date,FUN=sum,na.rm=T)
hist(newDailyTotal,xlab="Total Steps taken each day")
mean(newDailyTotal)
median(newDailyTotal)
data2$date <- as.Date(data2$date,"%Y-%m-%d")
data2$day <- weekdays(data2$date)
class(data2$day)
data2
type(data2$day)
head(data2$day)
data2$dayType <- c("Unknown")
head(data2)
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] %in% c("Saturday","Sunday"))
data2$dayType <- "weekend"
else
data2$dayType <- "weekday"
}
data2[1500:1650,]
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] == "Saturday")
data2$dayType <- "weekend"
else
data2$dayType <- "weekday"
}
data2[1500:1650,]
data2$dayType <- c("Unknown")
for(i in 1:nrow(data2)){
if(data2$day[i] %in% c("Saturday","Sunday"))
data2$dayType[i] <- "weekend"
else
data2$dayType[i] <- "weekday"
}
data2[1500:1650,]
head(data2,50)
averageSteps2 <- aggregate(steps ~ interval + day, data=data2, FUN=mean)
averageSteps2
averageSteps2 <- aggregate(steps ~ interval + dayType, data=data2, FUN=mean)
averageSteps2
ggplot(averageSteps2,aes(interval,steps))+
geom_line()+
facet_grid(day ~.)
ggplot(averageSteps2,aes(interval,steps))+
geom_line()+
facet_grid(dayType ~.)
ggplot(averageSteps2,aes(interval,steps))+
geom_line()+
facet_grid(dayType ~.)+
xlab("5-minute interval")+
ylab("Number of steps")
